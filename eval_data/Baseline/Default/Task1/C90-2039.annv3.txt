Citance Number: 1 | Reference Article: C90-2039.txt | Citing Article: P99-1061.txt | Citation Marker Offset: ['48'] | Citation Marker: Kogure, 1990 | Citation Offset: ['48'] | Citation Text: <S sid ="48" ssid = "28">While an improvement over simple destructive unification, Tomabechi&apos;s approach still suffers from what Kogure (Kogure, 1990) calls redundant copying.</S> | Reference Offset: ['161'] | Reference Text: <S sid ="161" ssid = "22">Two worst eases can be considered: (t) If there are no arcs whose labels are unique to an input node witlh respect to each other, the procedure in LING unification method behaves in the same way as the procedure in the Wroblewski&apos;s method.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 2 | Reference Article: C90-2039.xml | Citing Article: C90-3046.xml | Citation Marker Offset: ['102'] | Citation Marker: 6 | Citation Offset: ['102','103'] | Citation Text: <S sid ="102" ssid = "67">This is inefficient with many copy operations due to unfications of unnecessary features that do not contribute to successful unification [6].</S><S sid ="103" ssid = "68">Thus treatments such as strategic unification [6] have been developed.</S> | Reference Offset: ['198'] | Reference Text: <S sid ="198" ssid = "20">However, such cases do not occur or are very rare, and for example, in many cases of natural language analysis, FS unification failures occur in treating only limited kinds of features related to grammatical agreement such as number and/or person agreement and semantic selectional constraints.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 3 | Reference Article: C90-2039.xml | Citing Article: P91-1031.xml | Citation Marker Offset: ['49'] | Citation Marker: 1990 | Citation Offset: ['49'] | Citation Text: <S sid ="49" ssid = "9">This observation is the basis for a reordering method proposed by Kogure [1990].</S> | Reference Offset: ['50'] | Reference Text: <S sid ="50" ssid = "50">That is, an FS unification method is proposed that introduces a strategy called the e_arly failure lbinding strategy (the EFF strategy) to make FS unification efficient, in this method, FS unification orders are not specified explicitly by rule wril.ers, but are controlled by learned information on tendencies of FS constraint application failures.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 4 | Reference Article: C90-2039.xml | Citing Article: P91-1031.xml | Citation Marker Offset: ['62'] | Citation Marker: Kogure 1990 | Citation Offset: ['62'] | Citation Text: <S sid ="62" ssid = "22">Thus for any automatic counting scheme some constant shuffling and reshuffling of the conjunct order needs to be applied until the order stabilizes (see also [Kogure 1990]).</S> | Reference Offset: ['138'] | Reference Text: <S sid ="138" ssid = "56">This order strategy can be generalized to the EFF and applied to the ordering of arcs with common labels.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 5 | Reference Article: C90-2039.xml | Citing Article: E93-1008.xml | Citation Marker Offset: ['49'] | Citation Marker: Kogure, 1990 | Citation Offset: ['49'] | Citation Text: <S sid ="49" ssid = "29">The lazy copying approach ([Kogure, 1990], and [Emele, 1991] for lazy copying in TFS with historical backtracking) copies only overlapping parts of the structure.</S> | Reference Offset: ['86'] | Reference Text: <S sid ="86" ssid = "4">When a NODE&apos;s GENERATION value is equal to the global value specifying the current unit]cation process, the structure has been created in the current process or that the structure is currel~l. The characteristics which allow nondestructive incremental copy are the NODE&apos;s two different slots, FORWARD and COPY, for representing forwarding relationships.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 6 | Reference Article: C90-2039.xml | Citing Article: C92-2068.xml | Citation Marker Offset: ['21'] | Citation Marker: Kogure, 1990 | Citation Offset: ['21'] | Citation Text: <S sid ="21" ssid = "21">â€¢ Data-Structure Sharing: Two or more distinct graphs share the same subgraph by converging on the same node the notion of structure-sharing at the data structure level. [Kogure, 1990] calls copying of such structures Redundant Copying.</S> | Reference Offset: ['78'] | Reference Text: <S sid ="78" ssid = "22">TypeSymbol2 4c&quot; &apos;~~&apos;~/.~ypeSymbol3 featury &quot;X~ature5 TypeSymbol4 4r &quot;~TypeSymbol5 (b) directed graph notation Figure 2: TFS notations Phrase [sub(at ?X2 SignList ] dtrs CHconst Sign U Syn i&apos;oo I syn I head ?Xl . ] ubcat NonEmptySignLIst | [&apos;first ]1 ?x3 Lrest ?X2 J j Phrase -dtrs CHconst hdtr LexicalSignsyn Syn -head Head pos P orm Ga subcat NonEmptySignList Sign ,11 yn Synead Head L~,os N] Irest EmptySignkist Phrase &quot;syn Syn head ?X1 Head Fpos P Lform Ga ] Lsubcat ?X2 Empl.ySignList dtrs CHconst ccltr ?X3 Sign syn iyn head Head _ [pos N hdtr LexicalSign l-syn Syn l I F head :x~ 7/ Lsubcat [ NonEinptySignList l l P&quot;&quot; ~x~ llll Lrest ?X2 JJjJ Figure 3: Example of TFS unification Then, the unification of tl anti t2 is defined as their greatest lower bound or the meet.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 7 | Reference Article: C90-2039.xml | Citing Article: P91-1041.xml | Citation Marker Offset: ['16'] | Citation Marker: Kogure, 1990 | Citation Offset: ['16'] | Citation Text: <S sid ="16" ssid = "16">2In the large-scale HPSG-based spoken Japanese analysis system developed at ATR, sometimes 98 percent of the elapsed time is devoted to graph unification ([Kogure, 1990]).</S> | Reference Offset: ['14'] | Reference Text: <S sid ="14" ssid = "14">Japanese analysis system based on llPSG[Kogure 891 uses 90% - 98% of the elapsed time in FS unification.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 8 | Reference Article: C90-2039.xml | Citing Article: P91-1041.xml | Citation Marker Offset: ['230'] | Citation Marker: Kogure, 1990 | Citation Offset: ['230'] | Citation Text: <S sid ="230" ssid = "9">That is, unless some new scheme for reducing excessive copying is introduced such as scucture-sharing of an unchanged shared-forest ([Kogure, 1990]).</S> | Reference Offset: ['49'] | Reference Text: <S sid ="49" ssid = "49">In this paper, some of the efficiency of the procedure- based system is introduced into an FS unification-based system.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 9 | Reference Article: C90-2039.xml | Citing Article: C94-2143.xml | Citation Marker Offset: ['56'] | Citation Marker: Kogure, 1990 | Citation Offset: ['56'] | Citation Text: <S sid ="56" ssid = "11">A more eNcient unification algorithm would avoid this redundant copying (copying structures that can be shared by the input and resultant graphs) (Kogure, 1990).</S> | Reference Offset: ['134'] | Reference Text: <S sid ="134" ssid = "52">5, the subgraphs of the result DG surrounded by the dashed rectangle can be shared with subgraphs of input structures G1 and G2, Section 4 proposes a method t.hat avoids this problem, Wroblewski&apos;s method first treats arcs with labels that exist in both input nodes and then treats arcs with unique labels.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 10 | Reference Article: C90-2039.xml | Citing Article: C94-2143.xml | Citation Marker Offset: ['69'] | Citation Marker: Kogure, 1990 | Citation Offset: ['69'] | Citation Text: <S sid ="69" ssid = "24">Kogure (1990) proposed a lazy incremental copy graph (LING) unification that uses dependency-directed eol)yiug</S> | Reference Offset: ['202'] | Reference Text: <S sid ="202" ssid = "1">The strategic lazy incremental copy graph (SLING) unification method combines two incremental copy graph unification methods: the lazy incremental copy graph (LING) unification method and the strategic incremental copy graph (SING) unification method.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 11 | Reference Article: C90-2039.xml | Citing Article: P91-1042.xml | Citation Marker Offset: ['37'] | Citation Marker: Kogure 90 | Citation Offset: ['37'] | Citation Text: <S sid ="37" ssid = "37">A better method would avoid (eliminate) such redundant copying as it is called by [Kogure 90].</S> | Reference Offset: ['142'] | Reference Text: <S sid ="142" ssid = "3">With such a method, it is possible to delay copying a node until either its own contents need to change (e.g., node G3/Ka c !7&gt;) or until it is found to have an arc (sequence) to a node t, hat needs to be copied (e.g., node X G3/&lt;a c&gt; in Fig.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 12 | Reference Article: C90-2039.xml | Citing Article: P91-1042.xml | Citation Marker Offset: ['116'] | Citation Marker: Kogure 90 | Citation Offset: ['116','117','118','124'] | Citation Text: <S sid ="116" ssid = "116">As it has been noticed by [Godden 90] and [Kogure 90], the key idea of avoiding &quot;redundant copying&quot; is to do copying lazily.</S><S sid ="117" ssid = "117">Copying of nodes will be delayed until a destructive change is about to take place.</S><S sid ="118" ssid = "118">Kogure uses a revised copynode procedure which maintains copy dependency information in order to avoid immediate copying.</S><S sid ="124" ssid = "124">Similarly, in Kogure&apos;s approach, not all redundant copying is avoided in cases where there exists a feature path (a sequence of nodes connected by arcs) to a node that needs to be copied.</S> | Reference Offset: ['142'] | Reference Text: <S sid ="142" ssid = "3">With such a method, it is possible to delay copying a node until either its own contents need to change (e.g., node G3/Ka c !7&gt;) or until it is found to have an arc (sequence) to a node t, hat needs to be copied (e.g., node X G3/&lt;a c&gt; in Fig.</S> | Discourse Facet: BLANK | Annotator: Predictions

Citance Number: 13 | Reference Article: C90-2039.xml | Citing Article: W97-1503.xml | Citation Marker Offset: ['136'] | Citation Marker: Kogure, 1990 | Citation Offset: ['136'] | Citation Text: <S sid ="136" ssid = "136">PM can also choose among different unification algorithms that have been designed to: * carefully control and minimize the amount of copying needed with non-deterministic parsing schemata (Wroblewski, 1987) (Kogure, 1990);</S> | Reference Offset: ['43'] | Reference Text: <S sid ="43" ssid = "43">The advantages of such a system include: (1)rule writers are not required to describe control infimnation such as eonstraiut application order in a rule, and (12)rule descriptions can be used iu different processing directions, i.e., analysis and general,ion.</S> | Discourse Facet: BLANK | Annotator: Predictions

